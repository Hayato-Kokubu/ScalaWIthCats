Monad

コンストラクタ と flatmap を持つもの


functor は monad である
例: Option, list , future

for comprehensions が使える

Scala標準では、flatMap を含むクラスがない

monad は、一連の処理の計算のための機能である

一連の処理のそれぞれで、続けるかどうかを選べる


for式 と flatMap, map を復習したいな・・・


list では、 flatMap は順列組み合わせをつくる


4.1.1 def of Monad

pure: A => F[A]
flatMap: (F[A], A => F[B]) => F[B] を持つ

Scalaz, Haskell ではそれぞれ
pure    - point - return
flatMap - bind  - >>=    としている

pure: constructer を抽象化している
      値からmonadで包まれた値をつくる

Monad則

・Left identity  // 左単位元
∀ a: A, ∀ func: A => F[B] [ pure(a).flatMap(func) == func(a) ( ∈ F[B])]
// flatMap(pure(a), func) == func(a)


・Right identity // 右単位元
∀ m: F[A],  [ m.flatMap(pure) == m ( ∈ F[B])]
// flatMap(fa, pure) == fa

・Associativity  // 推移率
∀ m: F[A], ∀ f: A => F[B] , ∀ g: B => F[C]
  [ m.flatMap(f).flatMap(g) == m.flatMap(x => f(x).flatMap(g)) ( ∈ F[C])]
// flatMap( flatMap(fa, f), g) == flatmap(fa, {x => flatMap(f(x), g)})


Monad ---------> FlatMap (flatMap を持つ)
        |
        └------> Applicative (pure を持つ) ------> Functor(map を持つ)


・Either
catchOnly

  // 特定の例外がわかるときに、
  // 成功 => Right , 特定の例外 => Left とできる
  // それ以外の例外はthrow される。。。


catshNonFatal
  VirtualMachineError
  ThreadDeath
  InterruptedException
  LinkageError
  ControlThrowable
  以外をcatch する。
  いずれのエラーもヤバみ。。。


fromTry => failure ならLeft
fromOption => none なら Left 何を入れるかは第2引数で決める


Either のmap     : Rightだけへんこう
         leftMap : Leftだけへんこう
         bimap   : りょうほう


Either[Errors, T] では
Either[Throwable, T]よりも
我々がエラーハンドリングしたいエラーに特化したエラーハンドリングができるが、
・最初に見つけたえらーしかかえしてくれない
  (全てまわして、全てのえらーをかえしてほしい)
ことが問題。。。

4.5 Error Handling and MonadError とばす
    EitherT で戻るかも。。。


4.6 Eval

eager: 即時実行
lazy : 遅延実行
memorize  結果を記録するかどうか
          => 1度実行されたら結果がcacheされる


val: eager, memorized
println(x)がない場合、
特に呼び出されなくても、ロードされたら処理が走る ことがわかる。
=> 即時実行である

println(x)がある場合
Computing X が1度しか呼ばれないこと、ランダム値が等しい
=> 結果がcacheされる


def: lazy, not memorized
println(x)がない場合、
何も表示されない
=> 遅延実行である

println(x)がある場合
Computing X が毎回呼ばれること、ランダム値が異なる
=> 結果がcacheされない

lazy val:
println(x)がない場合、
何も表示されない
=> 遅延実行である

println(x)がある場合
Computing X が1度のみ呼ばれること、ランダム値が等しい
=> 結果がcacheされる



4.2 Eval Monad の評価

Eval は、3つのsubtype: Now, Later, Always があり
それぞれCompanion で定義される。

同じval で宣言しても
Now ・・・ val
Later ・・・ lazy val
Always ・・・ def
に近い評価となる
(def, lazy val として評価したらどうなる？)


def の場合
=> 全てがdef と同様になる

lazy val の場合
=> Now, Later が lazy, memorized
   Always     が lazy, not memorized となる
