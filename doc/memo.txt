
1.2.3 Recursive Implicit Resolution

  Option[A]でやりたいが、object では型引数をとれないため
  implicit def で(メソッド定義で)やる

  Option をやる場合には、None.type が 型クラスインスタンスでなければならない？



1.3 Exercise: Printable Library
  回答見ない版でやった


1.4 Meet Cats

Show: toString をいいかんじにじっそうしてくれる
値 val : A を,　String に変換してくれる


implicit の解決に cats.instasnces.int._ が必要

cats.instances.int の中には、 Show 用の implicit値がある

cats.kernel.instances.IntInstances を継承しており、そこでは
 catsKernelStdOrderForInt
 catsKernelStdGroupForInt
の2つが定義されている。
... kernel はなにをするところだろう？


これだけだとあまりありがたみがわからず。。。
int からString には暗黙の型変換してるからねぇ。。。


import cats._ // 全てのCatsの型クラス が使える
import cats.instasnces.all._ // 全てのCats の型クラスインスタンス が使える
import cats.syntax.all._  // 全てのsyntax // syntax とは？
import cats.implicits._ //



が、あまり使わない方がいいかも？
特に、何を使うのかがわからなくなりそう



ex はあとでやろう
とりあえずEq に進む


Eq : == をいい感じにしてくれる
val b = List(1, 2, 3).map(Option(_)).filter(item => item == 1)
  コンパイル時にエラーとなる 特に、実行じエラーにはならなかった
Error:(2, 60) Option[Int] and Int are unrelated: they will most likely never compare equal
  val b = List(1, 2, 3).map(Option(_)).filter(item => item == 1)

Equality,
Liberty,
Fraternity

import cats.syntax.eq._　をインポートすると、 === =!= を使える。
Eq[Int]を明示的に呼ぶ必要はないが、
import cats.instances.int._  // Eq[Int]で Eq[Int]が必要
import cats.syntax.eq._  // to use === or =!=
は必要

// なんかerrorになる
Error:scalac: there was one deprecation warning (since 2.11.0); re-run with -deprecation for details
Option() がダメっぽい


1.6 どのinstanceがつ変われるか？ // 変位の話

trait F[+A]  // covariant
  A < B ならば F[A] < F[B] が成り立つ

Cat < Animal であるときに、List[Cat] < List[Animal]

contraVariant

trait[-A]

処理 を表現する際に便利  // 詳しく見たいが、あとで


Ch1 まとめ

どのtype class も、conpanion object に instanceを作るメソッドがある
Show -> Show object のshow メソッド
Eq   -> Eq.instance


問題1.3

toString: 限定的にしか使わない。
          tokubetuna
          特別な型に対して特別な実装を組み込むことができない
          // override すればいいのでは？


implicit val で定義するのと implicit object で定義するのとの違い

implicit object の方は、初期化が遅い


new Trait {} という構文は、Trait trait を継承した無名クラスのインスタンスを作成する という意味
Java の関数型Interface とは異なり、複数のmethod でも



1.3 Printable の応用
furry: もふもふな



4.3 ID monad

monad を要求しているところに 非monadは入れられない。。。 当然ではある

Idモナドが橋渡しとなる

いいことあるのか？
=>  モナドではないものにflatmapやmap ができる
Ch8 でケーススタディをやる


 4.4 Either monad


 Scala2.12 で right biased でモナド化

 cats.syntax.either を Either のmonad化で使う必要はなくなった！

 // Either の復習あった方がいいか？

cats.syntax.either の役割その2 としては
asRight, asLeft メソッドが使える。
Right.apply や Left.apply とは異なり、
・Either として動ける
・値を渡さない方の型も指定できる