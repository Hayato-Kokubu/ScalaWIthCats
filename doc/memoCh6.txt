Semigroupal and Applicative

map と flatMap ではあらわせないデータがある

例:validation


Either でやると、最初の1つのエラーを検知したら処理がとまる
validation 時では全てのエラーを検知して報告してほしい

Future.apply
独立な処理であってもmapやfoldLeftでつないでしまうと処理を待ってしまう

2パターンの解決法

Semigroupal 複数の引数を使える

Applicative <---- SemiGroupal
              |
              └-- Functor
  pure を持つ

function application // 関数適用 ( おそらく = apply)


SemiGroupal: 同じ文脈の2つのinstanceを、同じ文脈のtupleにする

     SemiGroup   : join 2 values
<--> SemiGroupal: join 2 context


tupleN (N = 3 ~ 22)
どれかが none であると全体がnone となる

他にも、map, contramap, imap がある

mapN

Apply syntax
・tupled
・mapN
  中では、Semigroupal を用いている
  => 自作の型コンストラクタであれば、自分でSemigroupal を作る必要あり


type checked なのは、特筆すべきほどのことか？
普通にやってもなるのでは？
 => partial application で出てくるコンバイルエラーの話？



product : monad では、map とflatMap で実装している。
          list, either では不便だが、高階の場合に都合がいいことがあるという。

Monad ではなく、Semigropual のインスタンスを作るのに向いているため。
error handling で役にたつ。



Validated Eitherと比較される

Either    fail-fast    1つ目のエラーを返す
Validated accumulating 全てのエラーを返す

Validation.valid
           invalid    : smart constructor

他にも、Either.as(Left/Right), Option.some , none とかがある

raize, raizeError も使える
それぞれ syntax.applicative, syntax.appicativeError が必要


catchOnly, catchNonFatal
Error を Validated.Invalidに

fromTry
Try を validatedに

fromEither
Either を Validated に

fromOption
Opiton をValidated に   none の場合は引数で指定する


flatMapは使えない Monadではないため。。。
but ...
Either  <--> Validated の変換はできる
toEither
toValidated

一時的に変換してただちに戻すこともできる
withEither , withValidated
  Validated 使用中に一時的にEither のflatMap を使いたい時にできる
  => そんなことあるか？
